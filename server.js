const fs = require('fs')
const path = require('path')

const express = require('express')
const compression = require('compression')

const { createBundleRenderer } = require('vue-server-renderer')

const isProd = process.env.NODE_ENV === 'production'
const serverInfo =
  `express/${require('express/package.json').version} ` +
  `vue-server-renderer/${require('vue-server-renderer/package.json').version}`

const app = express()

const resolve = file => path.resolve(__dirname, file)
const serve = (path, cache) => express.static(resolve(path), {
  maxAge: cache && isProd ? 1000 * 60 * 60 * 24 * 30 : 0
})
const templatePath = resolve('./src/index.template.html')

const createRenderer = (bundle, options) => {
  // https://github.com/vuejs/vue/blob/dev/packages/vue-server-renderer/README.md#why-use-bundlerenderer
  return createBundleRenderer(bundle, Object.assign(options, {
    // this is only needed when vue-server-renderer is npm-linked
    basedir: path.resolve(__dirname, './dist'),
    // recommended for performance
    runInNewContext: false
  }))
}

// middleware error handling
const handleRenderError = ({err, res, req}) => {
  if (err.url) {
    res.redirect(err.url)
  } else if(err.code === 404) {
    res.status(404).send('404 | Page Not Found')
  } else {
    // Render Error Page or Redirect
    res.status(500).send('500 | Internal Server Error')
    console.error(`error during render : ${req.url}`)
    console.error(err.stack)
  }
}

let renderer
let devWatcher
if (isProd) {
  // In production: create server renderer using template and built server bundle.
  // The server bundle is generated by vue-ssr-webpack-plugin.
  const template = fs.readFileSync(templatePath, 'utf-8')
  const bundle = require('../dist/vue-ssr-server-bundle.json')
  // The client manifests are optional, but it allows the renderer
  // to automatically infer preload/prefetch links and directly add <script>
  // tags for any async chunks used during render, avoiding waterfall requests.
  const clientManifest = require('./dist/vue-ssr-client-manifest.json')
  renderer = createRenderer(bundle, {
    template,
    clientManifest
  })
} else {
  devWatcher = require('./serverBuildUtils/setupDevServer')(
    app,
    templatePath,
    (bundle, options) => {
      renderer = createRenderer(bundle, options)
    }
  )
}

const productionRenderHandler = (req, res) => {
  const s = Date.now()
  const context = {
    title: 'Vue SSR', // default title
    url: req.url
  }

  res.setHeader("Content-Type", "text/html")
  res.setHeader("Server", serverInfo)

  prodRenderer.renderToString(context, (err, html) => {
    if (err) {
      return handleRenderError({err, res, req})
    }
    res.send(html)
  })
}

const developmentRenderHandler = (req, res) => {
  // In development: setup the dev server with watch and hot-reload,
  // and create a new renderer on bundle / index template update.
  devWatcher.then(() => {
    const s = Date.now()
    const context = {
      title: 'Vue SSR', // default title
      url: req.url
    }

    res.setHeader("Content-Type", "text/html")
    res.setHeader("Server", serverInfo)

    renderer.renderToString(context, (err, html) => {
      if (err) {
        return handleRenderError({err, res, req})
      }

      res.send(html)
      if (!isProd) {
        console.log(`whole request: ${Date.now() - s}ms`)
      }
    })
  })
}

app.use(compression())
app.use('/dist', serve('./dist', true))
app.use('/public', serve('./public', true))

app.get('*', isProd ? productionRenderHandler : developmentRenderHandler)

const port = process.env.PORT || 8080
app.listen(port, () => {
  console.log(`server started at localhost:${port}`)
})
